        -:    0:Source:C:/Users/munte/CLionProjects/LAB2_4__/service.c
        -:    0:Graph:C:\Users\munte\CLionProjects\LAB2_4__\cmake-build-debug-coverage\CMakeFiles\LAB2_4__.dir\service.c.gcno
        -:    0:Data:C:\Users\munte\CLionProjects\LAB2_4__\cmake-build-debug-coverage\CMakeFiles\LAB2_4__.dir\service.c.gcda
        -:    0:Runs:1
        -:    1:#include "service.h"
        -:    2:#include <string.h>
        -:    3:#include "customsort.h"
        -:    4:#include <assert.h>
function createManagerOferte called 11 returned 100% blocks executed 100%
       11:    5:ManagerOferte createManagerOferte()
        -:    6:{
        -:    7:    ManagerOferte store;
       11:    8:    store.allOferte = createEmpty(destroyOferta);
       11:    8-block  0
call    0 returned 11
       11:    9:    store.undoList = createEmpty(destroy);
call    0 returned 11
       11:   10:    return store;
        -:   11:}
function destroyManagerOferte called 11 returned 100% blocks executed 100%
       11:   12:void destroyManagerOferte(ManagerOferte* store)
        -:   13:{
       11:   14:    destroy(store->allOferte);
       11:   14-block  0
call    0 returned 11
       11:   15:    destroy(store->undoList);
call    0 returned 11
       11:   16:}
        -:   17:/*
        -:   18: * Adauga Oferta la lista l
        -:   19: * param l: lista
        -:   20: * param tip: tipul imobiliarului
        -:   21: * param suprafata: suprafata imobiliarului
        -:   22: * param adresa: adresa imobiliarului
        -:   23: * param pret: pretul imobiliarului
        -:   24: * return: adauga o oferta
        -:   25: */
function adaugaOferta called 33 returned 100% blocks executed 100%
       33:   26:int adaugaOferta(ManagerOferte* store, char* tip, int suprafata, char* adresa, int pret)
        -:   27:{
       33:   28:    Oferta* a = creeazaOferta(tip,suprafata,adresa,pret);
       33:   28-block  0
call    0 returned 33
       33:   29:    int succ=valideazaOferta(a);
call    0 returned 33
       33:   30:    if(succ!=0)
branch  0 taken 4 (fallthrough)
branch  1 taken 29
        -:   31:    {
        4:   32:        destroyOferta(a);
        4:   32-block  0
call    0 returned 4
        4:   33:        return succ;
        -:   34:    }
       29:   35:    List* toUndo= copyList(store->allOferte,copyOferta);
       29:   35-block  0
call    0 returned 29
       29:   36:    add(store->allOferte, a);
call    0 returned 29
       29:   37:    add(store->undoList,toUndo);
call    0 returned 29
       29:   38:    return 0;
        -:   39:}
function findOferta called 8 returned 100% blocks executed 100%
        8:   40:int findOferta(ManagerOferte* store, char* tip,int suprafata){
        8:   41:    int poz_to_delete = -1;
        -:   42:
       22:   43:    for (int i = 0; i < store->allOferte->length; i++) {
        8:   43-block  0
       14:   43-block  1
       22:   43-block  2
branch  0 taken 19
branch  1 taken 3 (fallthrough)
       19:   44:        Oferta * a = get(store->allOferte, i);
       19:   44-block  0
call    0 returned 19
       19:   45:        if (strcmp(a->tip, tip) == 0 && a->suprafata==suprafata) {
branch  0 taken 7 (fallthrough)
branch  1 taken 12
        7:   45-block  0
branch  2 taken 5 (fallthrough)
branch  3 taken 2
        5:   46:            poz_to_delete = i;
        5:   47:            break;
        5:   47-block  0
        -:   48:        }
        -:   49:    }
        8:   50:    return poz_to_delete;
        8:   50-block  0
        -:   51:}
        -:   52:/*
        -:   53: * Sterge oferta in functie de tip si suprafata
        -:   54: * param l: lista
        -:   55: * param tip: tipul imobiliarului ofertei
        -:   56: * param suprafata: suprafata imobiliarului ofertei
        -:   57: * return: 1 - daca s-a sters din stoc
        -:   58: *         0 - daca nu s-a sters nimic din stoc
        -:   59: */
function stergeOferta called 3 returned 100% blocks executed 100%
        3:   60:int stergeOferta(ManagerOferte* store, char* tip, int suprafata)
        -:   61:{
        3:   62:    int poz_to_delete=findOferta(store,tip,suprafata);
        3:   62-block  0
call    0 returned 3
        3:   63:    if(poz_to_delete!=-1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:   64:    {
        2:   65:        List* toUndo= copyList(store->allOferte,copyOferta);
        2:   65-block  0
call    0 returned 2
        2:   66:        add(store->undoList,toUndo);
call    0 returned 2
        -:   67:
        2:   68:        Oferta* a= delete(store->allOferte, poz_to_delete);
call    0 returned 2
        2:   69:        destroyOferta(a);
call    0 returned 2
        2:   70:        return 1;
        -:   71:    }
        1:   72:    return 0;
        1:   72-block  0
        -:   73:}
        -:   74:
        -:   75:/*
        -:   76: * Modifica Oferta in functie de tip si suprafata
        -:   77: * param l: lista
        -:   78: * param tip: Tipul Ofertei ce se modifica
        -:   79: * param suprafata: Suprafata imobiliarului ofertei ce se modifica
        -:   80: * param tip_nou: Tipul Nou al Ofertei ce se modifica
        -:   81: * param suprafata_nou: Suprafata noua a imobiliarului ofertei ce se modifica
        -:   82: * return: 1 - daca s-a modificat
        -:   83: *         0 - daca nu s-a modificat
        -:   84: */
function modificaOferta called 3 returned 100% blocks executed 100%
        3:   85:int modificaOferta(ManagerOferte* store, char* tip, int suprafata, char* tip_nou, int suprafata_noua, char* adresa_noua,int pret_nou)
        -:   86:{
        3:   87:    int poz_to_delete=findOferta(store,tip,suprafata);
        3:   87-block  0
call    0 returned 3
        3:   88:    if (poz_to_delete != -1) {
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   89:        List* toUndo = copyList(store->allOferte, copyOferta);
        2:   89-block  0
call    0 returned 2
        2:   90:        add(store->undoList, toUndo);
call    0 returned 2
        -:   91:
        2:   92:        Oferta * ofertaNoua = creeazaOferta(tip_nou, suprafata_noua, adresa_noua, pret_nou);
call    0 returned 2
        2:   93:        Oferta * ofertaReplaced = setElem(store->allOferte, poz_to_delete, ofertaNoua);
call    0 returned 2
        2:   94:        destroyOferta(ofertaReplaced);
call    0 returned 2
        2:   95:        return 1;
        -:   96:    }
        -:   97:    else
        1:   98:        return 0;
        1:   98-block  0
        -:   99:}
        -:  100:
function compararePret called 3 returned 100% blocks executed 100%
        3:  101:int compararePret(Oferta* a1,Oferta* a2)
        -:  102:{
        3:  103:    return a1->pret > a2->pret;
        3:  103-block  0
        -:  104:}
        -:  105:
function comparareTip called 6 returned 100% blocks executed 100%
        6:  106:int comparareTip(Oferta* a1,Oferta* a2)
        -:  107:{
        6:  108:    return strcmp(a1->tip, a2->tip);
        6:  108-block  0
        -:  109:}
function sortOferteByPret called 1 returned 100% blocks executed 100%
        1:  110:List* sortOferteByPret(ManagerOferte * store) {
        1:  111:    List* ofertaList = copyList(store->allOferte, copyOferta);
        1:  111-block  0
call    0 returned 1
        1:  112:    sort(ofertaList, compararePret);
call    0 returned 1
        1:  113:    return ofertaList;
        -:  114:}
        -:  115:
function sortOferteByTip called 1 returned 100% blocks executed 100%
        1:  116:List* sortOferteByTip(ManagerOferte * store) {
        1:  117:    List* ofertaList = copyList(store->allOferte, copyOferta);
        1:  117-block  0
call    0 returned 1
        1:  118:    sort(ofertaList, comparareTip);
call    0 returned 1
        1:  119:    return ofertaList;
        -:  120:}
        -:  121:
function filterOferteTip called 7 returned 100% blocks executed 100%
        7:  122:List* filterOferteTip(ManagerOferte * store, char* tip) {
        7:  123:    if (strcmp(tip, "") != 0) {
        7:  123-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2:  124:        List* filteredList = createEmpty(destroyOferta);
        2:  124-block  0
call    0 returned 2
        8:  125:        for (int i = 0; i < store->allOferte->length; i++) {
        6:  125-block  0
        8:  125-block  1
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  126:            Oferta * a = get(store->allOferte, i);
        6:  126-block  0
call    0 returned 6
        6:  127:            if (strcmp(tip, a->tip) == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:  128:                add(filteredList, creeazaOferta(a->tip,a->suprafata, a->adresa, a->pret));
        2:  128-block  0
call    0 returned 2
call    1 returned 2
        -:  129:        }
        2:  130:        return filteredList;
        2:  130-block  0
        -:  131:    }
        -:  132:    else {
        5:  133:        return copyList(store->allOferte, copyOferta);
        5:  133-block  0
call    0 returned 5
        -:  134:    }
        -:  135:}
function filterOferteSuprafata called 3 returned 100% blocks executed 100%
        3:  136:List* filterOferteSuprafata(ManagerOferte * store, int suprafata) {
        3:  137:    if (suprafata >= 0) {
        3:  137-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  138:        List* filteredList = createEmpty(destroyOferta);
        2:  138-block  0
call    0 returned 2
        8:  139:        for (int i = 0; i < store->allOferte->length; i++) {
        6:  139-block  0
        8:  139-block  1
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  140:            Oferta * a = get(store->allOferte, i);
        6:  140-block  0
call    0 returned 6
        6:  141:            if (a->suprafata == suprafata)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:  142:                add(filteredList, creeazaOferta(a->tip,a->suprafata, a->adresa, a->pret));
        2:  142-block  0
call    0 returned 2
call    1 returned 2
        -:  143:        }
        2:  144:        return filteredList;
        2:  144-block  0
        -:  145:    }
        -:  146:    else {
        1:  147:        return copyList(store->allOferte, copyOferta);
        1:  147-block  0
call    0 returned 1
        -:  148:    }
        -:  149:}
function filterOfertePret called 3 returned 100% blocks executed 100%
        3:  150:List* filterOfertePret(ManagerOferte * store, int pret) {
        3:  151:    if (pret >= 0) {
        3:  151-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  152:        List* filteredList = createEmpty(destroyOferta);
        2:  152-block  0
call    0 returned 2
        8:  153:        for (int i = 0; i < store->allOferte->length; i++) {
        6:  153-block  0
        8:  153-block  1
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  154:            Oferta * a = get(store->allOferte, i);
        6:  154-block  0
call    0 returned 6
        6:  155:            if (a->pret == pret)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:  156:                add(filteredList, creeazaOferta(a->tip,a->suprafata, a->adresa, a->pret));
        2:  156-block  0
call    0 returned 2
call    1 returned 2
        -:  157:        }
        2:  158:        return filteredList;
        2:  158-block  0
        -:  159:    }
        -:  160:    else {
        1:  161:        return copyList(store->allOferte, copyOferta);
        1:  161-block  0
call    0 returned 1
        -:  162:    }
        -:  163:}
function undo called 4 returned 100% blocks executed 100%
        4:  164:int undo(ManagerOferte* store) {
        4:  165:    if (size(store->undoList) == 0)
        4:  165-block  0
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        1:  166:        return 0;
        1:  166-block  0
        3:  167:    List* l = delete(store->undoList, store->undoList->length - 1);
        3:  167-block  0
call    0 returned 3
        3:  168:    destroy(store->allOferte);
call    0 returned 3
        3:  169:    store->allOferte = l;
        3:  170:    return 1;
        -:  171:}
function testAddService called 1 returned 100% blocks executed 79%
        1:  172:void testAddService() {
        1:  173:    ManagerOferte store = createManagerOferte();
        1:  173-block  0
call    0 returned 1
        1:  174:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  175:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  175-block  0
call    2 never executed
        1:  175-block  1
        -:  176:
        1:  177:    int successful2 = adaugaOferta(&store, "",1000, "zorilor", 50000);
        1:  177-block  0
call    0 returned 1
       1*:  178:    assert(successful2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  178-block  0
call    2 never executed
        1:  178-block  1
        -:  179:
        1:  180:    int successful3 = adaugaOferta(&store, "teren",-1000, "zorilor", 50000);
        1:  180-block  0
call    0 returned 1
       1*:  181:    assert(successful3 == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  181-block  0
call    2 never executed
        1:  181-block  1
        -:  182:
        1:  183:    int successful4 = adaugaOferta(&store, "teren",1000, "", 50000);
        1:  183-block  0
call    0 returned 1
       1*:  184:    assert(successful4 == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  184-block  0
call    2 never executed
        1:  184-block  1
        -:  185:
        1:  186:    int successful5 = adaugaOferta(&store, "teren",1000, "zorilor", -50000);
        1:  186-block  0
call    0 returned 1
       1*:  187:    assert(successful5 == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  187-block  0
call    2 never executed
        1:  187-block  1
        -:  188:
        1:  189:    List* allOferte = filterOferteTip(&store, "");
        1:  189-block  0
call    0 returned 1
       1*:  190:    assert(size(allOferte) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  190-block  0
call    3 never executed
        1:  190-block  1
        1:  191:    destroy(allOferte);
        1:  191-block  0
call    0 returned 1
        -:  192:
        1:  193:    destroyManagerOferte(&store);
call    0 returned 1
        -:  194:
        -:  195:
        1:  196:}
function testFindService called 1 returned 100% blocks executed 77%
        1:  197:void testFindService() {
        1:  198:    ManagerOferte store = createManagerOferte();
        1:  198-block  0
call    0 returned 1
        -:  199:
        1:  200:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  201:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  201-block  0
call    2 never executed
        1:  201-block  1
        -:  202:
        1:  203:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 50000);
        1:  203-block  0
call    0 returned 1
       1*:  204:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  204-block  0
call    2 never executed
        1:  204-block  1
        -:  205:
        1:  206:    int successful3 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
        1:  206-block  0
call    0 returned 1
       1*:  207:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  207-block  0
call    2 never executed
        1:  207-block  1
        -:  208:
        1:  209:    int successful4 = adaugaOferta(&store, "teren",1000, "iris", 50000);
        1:  209-block  0
call    0 returned 1
       1*:  210:    assert(successful4 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  210-block  0
call    2 never executed
        1:  210-block  1
        -:  211:
       1*:  212:    assert(size(store.allOferte) == 4);
        1:  212-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  212-block  1
call    3 never executed
        1:  212-block  2
        1:  213:    int poz = findOferta(&store, "casa", 1000);
        1:  213-block  0
call    0 returned 1
       1*:  214:    assert(poz==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  214-block  0
call    2 never executed
        1:  214-block  1
        -:  215:
        1:  216:    int poz2 = findOferta(&store, "apartament", 1000);
        1:  216-block  0
call    0 returned 1
       1*:  217:    assert(poz2==-1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  217-block  0
call    2 never executed
        1:  217-block  1
        -:  218:
        1:  219:    destroyManagerOferte(&store);
        1:  219-block  0
call    0 returned 1
        -:  220:
        1:  221:}
function testModifyService called 1 returned 100% blocks executed 77%
        1:  222:void testModifyService() {
        1:  223:    ManagerOferte store = createManagerOferte();
        1:  223-block  0
call    0 returned 1
        -:  224:
        1:  225:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  226:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  226-block  0
call    2 never executed
        1:  226-block  1
        -:  227:
        1:  228:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 50000);
        1:  228-block  0
call    0 returned 1
       1*:  229:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  229-block  0
call    2 never executed
        1:  229-block  1
        -:  230:
        1:  231:    int successful3 = adaugaOferta(&store, "teren",2000, "zorilor", 50000);
        1:  231-block  0
call    0 returned 1
       1*:  232:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  232-block  0
call    2 never executed
        1:  232-block  1
        -:  233:
        1:  234:    int successful4 = adaugaOferta(&store, "teren",3000, "iris", 50000);
        1:  234-block  0
call    0 returned 1
       1*:  235:    assert(successful4 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  235-block  0
call    2 never executed
        1:  235-block  1
        -:  236:
       1*:  237:    assert(size(store.allOferte) == 4);
        1:  237-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  237-block  1
call    3 never executed
        1:  237-block  2
        1:  238:    int modify_success = modificaOferta(&store, "casa", 1000, "apartament", 1000, "zorilor", 50000);
        1:  238-block  0
call    0 returned 1
       1*:  239:    assert(modify_success==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  239-block  0
call    2 never executed
        1:  239-block  1
        1:  240:    int modify_success2 = modificaOferta(&store, "apartament", 10000, "apartament", 1000, "zorilor", 50000);
        1:  240-block  0
call    0 returned 1
       1*:  241:    assert(modify_success2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  241-block  0
call    2 never executed
        1:  241-block  1
        1:  242:    destroyManagerOferte(&store);
        1:  242-block  0
call    0 returned 1
        1:  243:}
function testDeleteService called 1 returned 100% blocks executed 78%
        1:  244:void testDeleteService() {
        1:  245:    ManagerOferte store = createManagerOferte();
        1:  245-block  0
call    0 returned 1
        -:  246:
        1:  247:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  248:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  248-block  0
call    2 never executed
        1:  248-block  1
        -:  249:
        1:  250:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 50000);
        1:  250-block  0
call    0 returned 1
       1*:  251:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  251-block  0
call    2 never executed
        1:  251-block  1
        -:  252:
        1:  253:    int successful3 = adaugaOferta(&store, "teren",2000, "zorilor", 50000);
        1:  253-block  0
call    0 returned 1
       1*:  254:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  254-block  0
call    2 never executed
        1:  254-block  1
        -:  255:
       1*:  256:    assert(size(store.allOferte) == 3);
        1:  256-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  256-block  1
call    3 never executed
        1:  256-block  2
        1:  257:    int succesful_del = stergeOferta(&store, "teren", 2000);
        1:  257-block  0
call    0 returned 1
       1*:  258:    assert(succesful_del == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  258-block  0
call    2 never executed
        1:  258-block  1
        1:  259:    int succesfully_del = stergeOferta(&store, "apartament", 1000);
        1:  259-block  0
call    0 returned 1
       1*:  260:    assert(succesfully_del == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  260-block  0
call    2 never executed
        1:  260-block  1
        1:  261:    destroyManagerOferte(&store);
        1:  261-block  0
call    0 returned 1
        1:  262:}
        -:  263:
function testFilterTipService called 1 returned 100% blocks executed 81%
        1:  264:void testFilterTipService() {
        1:  265:    ManagerOferte store = createManagerOferte();
        1:  265-block  0
call    0 returned 1
        -:  266:
        1:  267:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  268:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  268-block  0
call    2 never executed
        1:  268-block  1
        -:  269:
        1:  270:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 50000);
        1:  270-block  0
call    0 returned 1
       1*:  271:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  271-block  0
call    2 never executed
        1:  271-block  1
        -:  272:
        1:  273:    int successful3 = adaugaOferta(&store, "teren",2000, "zorilor", 50000);
        1:  273-block  0
call    0 returned 1
       1*:  274:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  274-block  0
call    2 never executed
        1:  274-block  1
        -:  275:
       1*:  276:    assert(size(store.allOferte) == 3);
        1:  276-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  276-block  1
call    3 never executed
        1:  276-block  2
        -:  277:
        1:  278:    List* filteredList = filterOferteTip(&store, "teren");
        1:  278-block  0
call    0 returned 1
       1*:  279:    assert(size(filteredList) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  279-block  0
call    3 never executed
        1:  279-block  1
        1:  280:    destroy(filteredList);
        1:  280-block  0
call    0 returned 1
        -:  281:
        1:  282:    filteredList = filterOferteTip(&store, "apartament");
call    0 returned 1
       1*:  283:    assert(size(filteredList) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  283-block  0
call    3 never executed
        1:  283-block  1
        1:  284:    destroy(filteredList);
        1:  284-block  0
call    0 returned 1
        -:  285:
        1:  286:    filteredList = filterOferteTip(&store, "");
call    0 returned 1
       1*:  287:    assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  287-block  0
call    3 never executed
        1:  287-block  1
        1:  288:    destroy(filteredList);
        1:  288-block  0
call    0 returned 1
        1:  289:    destroyManagerOferte(&store);
call    0 returned 1
        1:  290:}
function testFilterPretService called 1 returned 100% blocks executed 81%
        1:  291:void testFilterPretService() {
        1:  292:    ManagerOferte store = createManagerOferte();
        1:  292-block  0
call    0 returned 1
        -:  293:
        1:  294:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  295:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  295-block  0
call    2 never executed
        1:  295-block  1
        -:  296:
        1:  297:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 30000);
        1:  297-block  0
call    0 returned 1
       1*:  298:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  298-block  0
call    2 never executed
        1:  298-block  1
        -:  299:
        1:  300:    int successful3 = adaugaOferta(&store, "teren",2000, "zorilor", 50000);
        1:  300-block  0
call    0 returned 1
       1*:  301:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  301-block  0
call    2 never executed
        1:  301-block  1
        -:  302:
       1*:  303:    assert(size(store.allOferte) == 3);
        1:  303-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  303-block  1
call    3 never executed
        1:  303-block  2
        -:  304:
        1:  305:    List* filteredList = filterOfertePret(&store,50000 );
        1:  305-block  0
call    0 returned 1
       1*:  306:    assert(size(filteredList) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  306-block  0
call    3 never executed
        1:  306-block  1
        1:  307:    destroy(filteredList);
        1:  307-block  0
call    0 returned 1
        -:  308:
        1:  309:    filteredList = filterOfertePret(&store, 10);
call    0 returned 1
       1*:  310:    assert(size(filteredList) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  310-block  0
call    3 never executed
        1:  310-block  1
        1:  311:    destroy(filteredList);
        1:  311-block  0
call    0 returned 1
        -:  312:
        1:  313:    filteredList = filterOfertePret(&store,-10 );
call    0 returned 1
       1*:  314:    assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  314-block  0
call    3 never executed
        1:  314-block  1
        1:  315:    destroy(filteredList);
        1:  315-block  0
call    0 returned 1
        1:  316:    destroyManagerOferte(&store);
call    0 returned 1
        1:  317:}
function testFilterSuprafataService called 1 returned 100% blocks executed 81%
        1:  318:void testFilterSuprafataService() {
        1:  319:    ManagerOferte store = createManagerOferte();
        1:  319-block  0
call    0 returned 1
        -:  320:
        1:  321:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  322:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  322-block  0
call    2 never executed
        1:  322-block  1
        -:  323:
        1:  324:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 30000);
        1:  324-block  0
call    0 returned 1
       1*:  325:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  325-block  0
call    2 never executed
        1:  325-block  1
        -:  326:
        1:  327:    int successful3 = adaugaOferta(&store, "teren",2000, "zorilor", 50000);
        1:  327-block  0
call    0 returned 1
       1*:  328:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  328-block  0
call    2 never executed
        1:  328-block  1
        -:  329:
       1*:  330:    assert(size(store.allOferte) == 3);
        1:  330-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  330-block  1
call    3 never executed
        1:  330-block  2
        -:  331:
        1:  332:    List* filteredList = filterOferteSuprafata(&store,1000 );
        1:  332-block  0
call    0 returned 1
       1*:  333:    assert(size(filteredList) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  333-block  0
call    3 never executed
        1:  333-block  1
        1:  334:    destroy(filteredList);
        1:  334-block  0
call    0 returned 1
        -:  335:
        1:  336:    filteredList = filterOferteSuprafata(&store, 3000);
call    0 returned 1
       1*:  337:    assert(size(filteredList) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  337-block  0
call    3 never executed
        1:  337-block  1
        1:  338:    destroy(filteredList);
        1:  338-block  0
call    0 returned 1
        -:  339:
        1:  340:    filteredList = filterOferteSuprafata(&store,-10 );
call    0 returned 1
       1*:  341:    assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  341-block  0
call    3 never executed
        1:  341-block  1
        1:  342:    destroy(filteredList);
        1:  342-block  0
call    0 returned 1
        1:  343:    destroyManagerOferte(&store);
call    0 returned 1
        1:  344:}
function testSortPretService called 1 returned 100% blocks executed 79%
        1:  345:void testSortPretService() {
        1:  346:    ManagerOferte store = createManagerOferte();
        1:  346-block  0
call    0 returned 1
        -:  347:
        1:  348:    int successful1 = adaugaOferta(&store, "teren",1000, "zorilor", 50000);
call    0 returned 1
       1*:  349:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  349-block  0
call    2 never executed
        1:  349-block  1
        -:  350:
        1:  351:    int successful2 = adaugaOferta(&store, "casa",1000, "zorilor", 30000);
        1:  351-block  0
call    0 returned 1
       1*:  352:    assert(successful2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  352-block  0
call    2 never executed
        1:  352-block  1
        -:  353:
        1:  354:    int successful3 = adaugaOferta(&store, "teren",2000, "zorilor", 50000);
        1:  354-block  0
call    0 returned 1
       1*:  355:    assert(successful3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  355-block  0
call    2 never executed
        1:  355-block  1
        -:  356:
       1*:  357:    assert(size(store.allOferte) == 3);
        1:  357-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  357-block  1
call    3 never executed
        1:  357-block  2
        1:  358:    List* sortedList = sortOferteByPret(&store);
        1:  358-block  0
call    0 returned 1
        1:  359:    Oferta* a1 = get(sortedList, 0);
call    0 returned 1
        1:  360:    Oferta* a2 = get(sortedList, 1);
call    0 returned 1
        1:  361:    Oferta* a3 = get(sortedList, 2);
call    0 returned 1
        -:  362:
        -:  363:
       1*:  364:    assert(a1->pret == 30000);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  364-block  0
call    2 never executed
        1:  364-block  1
       1*:  365:    assert(a2->pret == 50000);
        1:  365-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  365-block  1
call    2 never executed
        1:  365-block  2
       1*:  366:    assert(a3->pret == 50000);
        1:  366-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  366-block  1
call    2 never executed
        1:  366-block  2
        -:  367:
        1:  368:    destroy(sortedList);
        1:  368-block  0
call    0 returned 1
        1:  369:    destroyManagerOferte(&store);
call    0 returned 1
        1:  370:}
        -:  371:
function populateOfertaList called 1 returned 100% blocks executed 76%
        1:  372:void populateOfertaList(ManagerOferte * store) {
        1:  373:    int successful1 = adaugaOferta(store, "teren",1000, "zorilor", 50000);
        1:  373-block  0
call    0 returned 1
        1:  374:    int successful2 = adaugaOferta(store, "casa",1000, "zorilor", 30000);
call    0 returned 1
        1:  375:    int successful3 = adaugaOferta(store, "teren",2000, "zorilor", 50000);
call    0 returned 1
        1:  376:    int successful4 = adaugaOferta(store, "apartament",1000, "zorilor", 50000);
call    0 returned 1
       1*:  377:    assert(successful1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  377-block  0
call    2 never executed
        1:  377-block  1
       1*:  378:    assert(successful2 == 0);
        1:  378-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  378-block  1
call    2 never executed
        1:  378-block  2
       1*:  379:    assert(successful3 == 0);
        1:  379-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  379-block  1
call    2 never executed
        1:  379-block  2
       1*:  380:    assert(successful4 == 0);
        1:  380-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  380-block  1
call    2 never executed
        1:  380-block  2
        1:  381:}
        -:  382:
function testSortTipService called 1 returned 100% blocks executed 81%
        1:  383:void testSortTipService()
        -:  384:{
        1:  385:    ManagerOferte store = createManagerOferte();
        1:  385-block  0
call    0 returned 1
        -:  386:
        1:  387:    populateOfertaList(&store);
call    0 returned 1
       1*:  388:    assert(size(store.allOferte) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  388-block  0
call    3 never executed
        1:  388-block  1
        -:  389:
        1:  390:    List* sortedList = sortOferteByTip(&store);
        1:  390-block  0
call    0 returned 1
        1:  391:    Oferta* a1 = get(sortedList, 0);
call    0 returned 1
        1:  392:    Oferta* a2 = get(sortedList, 1);
call    0 returned 1
        1:  393:    Oferta* a3 = get(sortedList, 2);
call    0 returned 1
        1:  394:    Oferta* a4 = get(sortedList, 3);
call    0 returned 1
        -:  395:
       1*:  396:    assert(strcmp(a1->tip, "apartament") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  396-block  0
call    2 never executed
        1:  396-block  1
       1*:  397:    assert(strcmp(a2->tip, "casa") == 0);
        1:  397-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  397-block  1
call    2 never executed
        1:  397-block  2
       1*:  398:    assert(strcmp(a3->tip, "teren") == 0);
        1:  398-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  398-block  1
call    2 never executed
        1:  398-block  2
       1*:  399:    assert(strcmp(a4->tip, "teren") == 0);
        1:  399-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  399-block  1
call    2 never executed
        1:  399-block  2
        -:  400:
        1:  401:    destroy(sortedList);
        1:  401-block  0
call    0 returned 1
        1:  402:    destroyManagerOferte(&store);
call    0 returned 1
        -:  403:
        1:  404:}
        -:  405:
function testUndo called 1 returned 100% blocks executed 81%
        1:  406:void testUndo() {
        1:  407:    ManagerOferte store = createManagerOferte();
        1:  407-block  0
call    0 returned 1
       1*:  408:    assert(adaugaOferta(&store, "teren",1000, "zorilor", 5000)==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  408-block  0
call    3 never executed
        1:  408-block  1
       1*:  409:    assert(modificaOferta(&store, "teren",1000,"apartament",2000,"bunaziua" ,8900) == 1);
        1:  409-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  409-block  1
call    3 never executed
        1:  409-block  2
       1*:  410:    assert(stergeOferta(&store, "apartament", 2000) == 1);
        1:  410-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  410-block  1
call    3 never executed
        1:  410-block  2
        -:  411:
        -:  412:    //undo delete
        1:  413:    undo(&store);
        1:  413-block  0
call    0 returned 1
        -:  414:
        1:  415:    List* crtOfertaList = filterOferteTip(&store, "");
call    0 returned 1
       1*:  416:    assert(size(crtOfertaList) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  416-block  0
call    3 never executed
        1:  416-block  1
        1:  417:    Oferta* a = get(crtOfertaList, 0);
        1:  417-block  0
call    0 returned 1
       1*:  418:    assert(a->pret == 8900);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  418-block  0
call    2 never executed
        1:  418-block  1
        1:  419:    destroy(crtOfertaList);
        1:  419-block  0
call    0 returned 1
        -:  420:
        -:  421:    //undo modify
        1:  422:    undo(&store);
call    0 returned 1
        -:  423:
        1:  424:    crtOfertaList = filterOferteTip(&store, "");
call    0 returned 1
       1*:  425:    assert(size(crtOfertaList) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  425-block  0
call    3 never executed
        1:  425-block  1
        1:  426:    Oferta* a1 = get(crtOfertaList, 0);
        1:  426-block  0
call    0 returned 1
       1*:  427:    assert(a1->pret == 5000);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  427-block  0
call    2 never executed
        1:  427-block  1
        1:  428:    destroy(crtOfertaList);
        1:  428-block  0
call    0 returned 1
        -:  429:
        -:  430:    //undo add
        1:  431:    undo(&store);
call    0 returned 1
        1:  432:    crtOfertaList = filterOferteTip(&store, "");
call    0 returned 1
       1*:  433:    assert(size(crtOfertaList) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  433-block  0
call    3 never executed
        1:  433-block  1
        1:  434:    destroy(crtOfertaList);
        1:  434-block  0
call    0 returned 1
        -:  435:
        1:  436:    int moreUndo = undo(&store);
call    0 returned 1
       1*:  437:    assert(moreUndo == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  437-block  0
call    2 never executed
        1:  437-block  1
        1:  438:    destroyManagerOferte(&store);
        1:  438-block  0
call    0 returned 1
        1:  439:}
