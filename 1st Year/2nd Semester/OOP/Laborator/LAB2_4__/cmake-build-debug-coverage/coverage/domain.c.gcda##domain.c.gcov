        -:    0:Source:C:/Users/munte/CLionProjects/LAB2_4__/domain.c
        -:    0:Graph:C:\Users\munte\CLionProjects\LAB2_4__\cmake-build-debug-coverage\CMakeFiles\LAB2_4__.dir\domain.c.gcno
        -:    0:Data:C:\Users\munte\CLionProjects\LAB2_4__\cmake-build-debug-coverage\CMakeFiles\LAB2_4__.dir\domain.c.gcda
        -:    0:Runs:1
        -:    1:#include <string.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "domain.h"
        -:    4:#include <assert.h>
        -:    5:/*
        -:    6: * Creeaza o entitate de tipul Oferta
        -:    7: * param tip: tipul imobiliarului(char) (teren, casa, apartament)
        -:    8: * param suprafata: suprafata imobiliarului (int)
        -:    9: * param adresa: adresa imobiliarului (char)
        -:   10: * param pret: pretul imobiliarului ofertei (int)
        -:   11: * return: Oferta
        -:   12: */
function creeazaOferta called 124 returned 100% blocks executed 100%
      124:   13:Oferta* creeazaOferta(char* tip, int suprafata, char* adresa, int pret)
        -:   14:{
      124:   15:    Oferta *a = malloc(sizeof(Oferta));
        -:   16:
      124:   17:    int nrc=(int) strlen(tip)+1;
      124:   18:    a->tip=malloc(nrc*sizeof(char));
      124:   19:    strncpy(a->tip, tip,nrc);
        -:   20:
      124:   21:    a->suprafata=suprafata;
        -:   22:
      124:   23:    nrc=(int) strlen(adresa)+1;
      124:   24:    a->adresa=malloc(nrc*sizeof(char));
      124:   25:    strncpy(a->adresa, adresa,nrc);
        -:   26:
      124:   27:    a->pret=pret;
        -:   28:
      124:   29:    return a;
      124:   29-block  0
        -:   30:}
        -:   31:
        -:   32:/*
        -:   33: * Valideaza o entitate de tipul Oferta
        -:   34: * param: a (struct)
        -:   35: * return: 1 - daca tip nu e valid
        -:   36: *         2 - daca suprafata nu e valida
        -:   37: *         3 - daca adresa nu e valida
        -:   38: *         4 - daca pretul nu e valid
        -:   39: *         0 - daca oferta e valida
        -:   40: */
function valideazaOferta called 38 returned 100% blocks executed 100%
       38:   41:int valideazaOferta(Oferta* a)
        -:   42:{
       38:   43:    if(strlen(a->tip)==0)
       38:   43-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 36
        2:   44:        return 1;
        2:   44-block  0
       36:   45:    if (a->suprafata<0)
       36:   45-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 34
        2:   46:        return 2;
        2:   46-block  0
       34:   47:    if(strlen(a->adresa)==0)
       34:   47-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 32
        2:   48:        return 3;
        2:   48-block  0
       32:   49:    if(a->pret<0)
       32:   49-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 30
        2:   50:        return 4;
        2:   50-block  0
       30:   51:    return 0;
       30:   51-block  0
        -:   52:}
        -:   53:
        -:   54:/*
        -:   55: * Sterge elementele entitatii de tipul Oferta
        -:   56: * param: a (struct)
        -:   57: */
function destroyOferta called 124 returned 100% blocks executed 100%
      124:   58:void destroyOferta(Oferta* a)
        -:   59:{
        -:   60:    /*a->suprafata=-1;
        -:   61:    a->pret=-1;
        -:   62:    a->tip=NULL;
        -:   63:    a->adresa=NULL;*/
      124:   64:    free(a->tip);
      124:   65:    free(a->adresa);
      124:   66:    free(a);
      124:   67:}
        -:   68:
function copyOferta called 63 returned 100% blocks executed 100%
       63:   69:Oferta* copyOferta(Oferta* a)
        -:   70:{
       63:   71:    return creeazaOferta(a->tip,a->suprafata,a->adresa,a->pret);
       63:   71-block  0
call    0 returned 63
        -:   72:}
function testCreateDestroy called 1 returned 100% blocks executed 73%
        1:   73:void testCreateDestroy() {
        1:   74:    Oferta* a = creeazaOferta("teren",1000, "zorilor", 40000);
        1:   74-block  0
call    0 returned 1
        -:   75:
       1*:   76:    assert(strcmp(a->tip, "teren") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   76-block  0
call    2 never executed
        1:   76-block  1
       1*:   77:    assert(strcmp(a->adresa, "zorilor") == 0);
        1:   77-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   77-block  1
call    2 never executed
        1:   77-block  2
       1*:   78:    assert(a->suprafata==1000);
        1:   78-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   78-block  1
call    2 never executed
        1:   78-block  2
       1*:   79:    assert(a->pret==40000);
        1:   79-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   79-block  1
call    2 never executed
        1:   79-block  2
        -:   80:
        1:   81:    destroyOferta(a);
        1:   81-block  0
call    0 returned 1
        -:   82:
        1:   83:}
        -:   84:
function testValideaza called 1 returned 100% blocks executed 84%
        1:   85:void testValideaza() {
        1:   86:    Oferta* a1 = creeazaOferta("teren",1000, "zorilor", 40000);
        1:   86-block  0
call    0 returned 1
       1*:   87:    assert(valideazaOferta(a1) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   87-block  0
call    3 never executed
        1:   87-block  1
        -:   88:
        1:   89:    Oferta* a2 = creeazaOferta("",1000, "zorilor", 40000);
        1:   89-block  0
call    0 returned 1
       1*:   90:    assert(valideazaOferta(a2) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   90-block  0
call    3 never executed
        1:   90-block  1
        -:   91:
        1:   92:    Oferta* a3 = creeazaOferta("teren",-1000, "zorilor", 40000);
        1:   92-block  0
call    0 returned 1
       1*:   93:    assert(valideazaOferta(a3) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   93-block  0
call    3 never executed
        1:   93-block  1
        -:   94:
        1:   95:    Oferta* a4 = creeazaOferta("teren",1000, "", 40000);
        1:   95-block  0
call    0 returned 1
       1*:   96:    assert(valideazaOferta(a4) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   96-block  0
call    3 never executed
        1:   96-block  1
        -:   97:
        1:   98:    Oferta* a5 = creeazaOferta("teren",1000, "zorilor", -40000);
        1:   98-block  0
call    0 returned 1
       1*:   99:    assert(valideazaOferta(a5) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   99-block  0
call    3 never executed
        1:   99-block  1
        -:  100:
        1:  101:    destroyOferta(a1);
        1:  101-block  0
call    0 returned 1
        1:  102:    destroyOferta(a2);
call    0 returned 1
        1:  103:    destroyOferta(a3);
call    0 returned 1
        1:  104:    destroyOferta(a4);
call    0 returned 1
        1:  105:    destroyOferta(a5);
call    0 returned 1
        1:  106:}
